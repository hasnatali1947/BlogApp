# frozen_string_literal: true

require 'rubygems'

module BundleScript
  # This module provides methods for bundler activation in the bin/bundle file.

  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless ARGV.first&.start_with?('update')

    ARGV.each_cons(2) do |a, b|
      return b =~ Gem::Version::ANCHORED_VERSION_PATTERN ? b : nil if a.start_with?('--bundler')
    end
    nil
  end

  def gemfile
    ENV['BUNDLE_GEMFILE']&.presence || File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    lockfile = case File.basename(gemfile)
               when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
               else "#{gemfile}.lock"
               end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    Gem::Version.new(version).approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }
    return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))

    error_message = <<~MSG
      Activating bundler (#{bundler_requirement}) failed:
      #{gem_error.message}

      To install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`
    MSG

    warn error_message
    exit 42
  end

  def activation_error_handling
    yield
  rescue StandardError, LoadError => e
    e
  end
end

BundleScript.load_bundler!

load Gem.bin_path('bundler', 'bundle') if BundleScript.invoked_as_script?
